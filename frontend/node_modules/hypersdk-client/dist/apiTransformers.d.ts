import { Marshaler } from "./Marshaler";
import { ActionOutput } from "./types";
import { Units } from "./types";
export type APITxResult = {
    timestamp: number;
    success: boolean;
    units: {
        bandwidth: number;
        compute: number;
        storageRead: number;
        storageAllocate: number;
        storageWrite: number;
    };
    fee: number;
    result: string[];
};
export type TxResult = Omit<APITxResult, 'result'> & {
    result: ActionOutput[];
};
export declare function processAPITxResult(response: APITxResult, marshaler: Marshaler): TxResult;
export type APITransactionStatus = {
    success: boolean;
    units: Units;
    fee: number;
    outputs: string[];
    error: string;
};
export type TransactionStatus = Omit<APITransactionStatus, 'outputs'> & {
    outputs: Record<string, unknown>[];
};
export declare function processAPITransactionStatus(response: APITransactionStatus, marshaler: Marshaler): TransactionStatus;
export declare function processAPIBlock(response: APIBlock, marshaler: Marshaler): Block;
type absctractBlock<FixedBytesType, TxStatusType> = {
    blockID: string;
    block: {
        parent: string;
        timestamp: number;
        height: number;
        txs: {
            base: {
                timestamp: number;
                chainId: string;
                maxFee: number;
            };
            actions: Record<string, unknown>[];
            auth: {
                signer: FixedBytesType;
                signature: FixedBytesType;
            };
        }[];
        stateRoot: string;
    };
    results: TxStatusType[];
    unitPrices: Units;
};
export type APIBlock = {
    block: absctractBlock<number[], APITransactionStatus>;
    blockBytes: string;
};
export type Block = absctractBlock<string, TransactionStatus>;
export {};
