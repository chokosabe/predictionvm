"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HyperSDKHTTPClient = void 0;
const base_1 = require("@scure/base");
class HyperSDKHTTPClient {
    constructor(apiHost, vmName, vmRPCPrefix) {
        this.apiHost = apiHost;
        this.vmName = vmName;
        this.vmRPCPrefix = vmRPCPrefix;
        this.getNetworkCache = null;
        if (this.vmRPCPrefix.startsWith('/')) {
            this.vmRPCPrefix = vmRPCPrefix.substring(1);
        }
    }
    async makeCoreAPIRequest(method, params = {}) {
        return this.makeApiRequest("coreapi", `hypersdk.${method}`, params);
    }
    async makeVmAPIRequest(method, params = {}) {
        return this.makeApiRequest(this.vmRPCPrefix, `${this.vmName}.${method}`, params);
    }
    async makeIndexerRequest(method, params = {}) {
        return this.makeApiRequest("indexer", `indexer.${method}`, params);
    }
    async makeApiRequest(namespace, method, params = {}) {
        const controller = new AbortController();
        const TIMEOUT_SEC = 10;
        const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_SEC * 1000);
        try {
            const response = await fetch(`${this.apiHost}/ext/bc/${this.vmName}/${namespace}`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    jsonrpc: "2.0",
                    method,
                    params,
                    id: parseInt(String(Math.random()).slice(2))
                }),
                signal: controller.signal
            });
            const json = await response.json();
            if (json?.error?.message) {
                throw new Error(json.error.message);
            }
            return json.result;
        }
        catch (error) {
            if (error instanceof Error && error.name === 'AbortError') {
                throw new Error(`Request timed out after ${TIMEOUT_SEC} seconds`);
            }
            throw error;
        }
        finally {
            clearTimeout(timeoutId);
        }
    }
    async getNetwork() {
        if (!this.getNetworkCache) {
            this.getNetworkCache = await this.makeCoreAPIRequest('network');
        }
        return this.getNetworkCache;
    }
    async sendRawTx(txBytes) {
        const bytesBase64 = base_1.base64.encode(txBytes);
        return this.makeCoreAPIRequest('submitTx', { tx: bytesBase64 });
    }
    async executeActions(actions, actor) {
        const { outputs, error } = await this.makeCoreAPIRequest('executeActions', {
            actions: actions.map(action => base_1.base64.encode(action)),
            actor: actor,
        });
        if (error) {
            throw new Error(error);
        }
        else if (outputs) {
            return outputs;
        }
        else {
            throw new Error("No output or error returned from execute");
        }
    }
    async getTransactionStatus(txId) {
        return this.makeIndexerRequest('getTx', { txId });
    }
    async getBlock(blockID) {
        return this.makeIndexerRequest('getBlock', { blockID });
    }
    async getBlockByHeight(height) {
        return this.makeIndexerRequest('getBlockByHeight', { height });
    }
    async getLatestBlock() {
        return this.makeIndexerRequest('getLatestBlock', {});
    }
}
exports.HyperSDKHTTPClient = HyperSDKHTTPClient;
