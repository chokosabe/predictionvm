import { ActionOutput, SignerIface } from './types';
import { VMABI } from './Marshaler';
import { Block, TxResult } from './apiTransformers';
import { ActionData } from './types';
type SignerType = {
    type: "ephemeral";
} | {
    type: "private-key";
    privateKey: Uint8Array;
} | {
    type: "metamask-snap";
    snapId?: string;
};
export declare class HyperSDKClient extends EventTarget {
    private readonly http;
    private signer;
    private abi;
    private marshaler;
    private blockSubscribers;
    private isPollingBlocks;
    constructor(apiHost: string, vmName: string, vmRPCPrefix: string);
    connectWallet(params: SignerType): Promise<SignerIface>;
    sendTransaction(actions: ActionData[]): Promise<TxResult>;
    executeActions(actions: ActionData[], actorHex?: string): Promise<ActionOutput[]>;
    getBalance(address: string): Promise<bigint>;
    convertToNativeTokens(formattedBalance: string): bigint;
    formatNativeTokens(balance: bigint): string;
    getAbi(): Promise<VMABI>;
    getTransactionStatus(txId: string): Promise<TxResult>;
    listenToBlocks(callback: (block: Block) => void, includeEmpty?: boolean, pollingRateMs?: number): Promise<() => void>;
    private startPollingBlocks;
    private createSigner;
    private getSigner;
    private getMarshaler;
    private createTransactionPayload;
    private waitForTransaction;
}
export declare function idStringToBigInt(id: string): bigint;
export {};
