import { APIBlock, APITxResult } from './apiTransformers';
interface NetworkInfo {
    networkId: number;
    subnetId: string;
    chainId: string;
}
export declare class HyperSDKHTTPClient {
    private readonly apiHost;
    private readonly vmName;
    private readonly vmRPCPrefix;
    private getNetworkCache;
    constructor(apiHost: string, vmName: string, vmRPCPrefix: string);
    makeCoreAPIRequest<T>(method: string, params?: object): Promise<T>;
    makeVmAPIRequest<T>(method: string, params?: object): Promise<T>;
    makeIndexerRequest<T>(method: string, params?: object): Promise<T>;
    private makeApiRequest;
    getNetwork(): Promise<NetworkInfo>;
    sendRawTx(txBytes: Uint8Array): Promise<{
        txId: string;
    }>;
    executeActions(actions: Uint8Array[], actor: string): Promise<string[]>;
    getTransactionStatus(txId: string): Promise<APITxResult>;
    getBlock(blockID: string): Promise<APIBlock>;
    getBlockByHeight(height: number): Promise<APIBlock>;
    getLatestBlock(): Promise<APIBlock>;
}
export {};
