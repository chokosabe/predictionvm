import { TransactionPayload } from './types';
export declare const ED25519_AUTH_ID = 0;
export type VMABI = {
    actions: TypedStructABI[];
    outputs: TypedStructABI[];
    types: TypeABI[];
};
type TypedStructABI = {
    id: number;
    name: string;
};
type TypeABI = {
    name: string;
    fields: ABIField[];
};
type ABIField = {
    name: string;
    type: string;
};
export declare class Marshaler {
    private abi;
    constructor(abi: VMABI);
    getHash(): Uint8Array;
    encode(typeName: string, dataJSON: string): Uint8Array;
    encodeTyped(typeName: string, dataJSON: string): Uint8Array;
    parseTyped(binary: Uint8Array, typeCategory: 'action' | 'output'): [Record<string, unknown>, number];
    parse(outputType: string, actionResultBinary: Uint8Array): [Record<string, unknown>, number];
    decodeField<T>(type: string, binaryData: Uint8Array): [T, number];
    private decodeSlice;
    private decodeArray;
    private getStructByteSize;
    encodeTransaction(tx: TransactionPayload): Uint8Array;
    decodeTransaction(tx: Uint8Array): [TransactionPayload, number];
    getActionTypeId(actionName: string): number;
    private encodeField;
    private encodeSlice;
    private encodeArray;
}
export declare function decodeNumber(type: string, binaryData: Uint8Array): bigint | number;
export declare function decodeAddress(binaryData: Uint8Array): [string, number];
export declare function addressBytesFromPubKey(pubKey: Uint8Array): Uint8Array;
export declare function addressHexFromPubKey(pubKey: Uint8Array): string;
export declare function encodeNumber(type: string, value: number | string): Uint8Array;
export {};
